openapi: 3.0.3
info:
  title: Non IP Device Control (NIPC) API
  description: |-
    There has been an large influx of non-IP devices supporting processes in manufacturing, healthcare, hospitality, retail, the home, and the office.  At the same time, wireless access points have been deployed nearly everywhere, many of which have radios that can transmit and receive different frame types, such as BLE, Zigbee. To integrate multiple of these use cases leveraging a single wireless infrastructure and avoid the need for parallel infrastructure, a Non IP device gateway function is necessary.
    The gateway provides the following functions:
       - authentication and authorization of application clients that will communicate with devices
       - API's that onboard a device on the network (out of scope for this specification, but covered in SCIM for devices)
       - API's that allow an app to set up a connection with a device
       - API's that allow an app to exchange data with a device
       - API's that allow a device to create registrations in the network for a device
    These collection of these API's, in combination with hte onboarding API (SCIM for devices) will allow an application to perform a complete set of operations on Non-IP devices.
  termsOfService: http://swagger.io/terms/
  contact:
    email: bbrinckm@cisco.com
  license:
    name: TBD
    url: TBD
  version: 0.2.6
externalDocs:
  description: NIPC IETF draft
  url: TBD
servers:
  - url: https://{gw_host}/nipc
    variables:
      gw_host:
        default: localhost
        description: Gateway Host
tags:
  - name: connectivity
    description: API's that allow apps to manage device connections
  - name: data
    description: API's that allow apps to exchange data with non-IP devices
  - name: registrations
    description: API's that allow apps to make registrations in the network for devices
  - name: bulk
    description: compound API that allows apps to combine requests into a single call

paths:
# API
##
  /connectivity/introduce:
    post:
      tags:
        - connectivity
      summary: Introduce a device to the network
      description: Introduce a device to the network
      operationId: connIntroduce
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntroduceResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 
##                
  /connectivity/connect:
    post:
      tags:
        - connectivity
      summary: Connect a device to the network
      description: Connect a device to the network
      operationId: connConnect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 

##  
  /connectivity/disconnect:
    post:
      tags:
        - connectivity
      summary: Disconnect a device to the network
      description: Disconnect a device to the network
      operationId: connDisconnect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 

##  
  /data/write:
    post:
      tags:
        - data
      summary: Write a value to an attribute on a device
      description: Write a value to an attribute on a device
      operationId: dataWrite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeValue'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeValueResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request       
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 
  
##
  /data/read:
    post:
      tags:
        - data
      summary: Read a value to an attribute on a device
      description: Read a value to an attribute on a device
      operationId: dataRead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeValueResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'     
  
##  
  /data/subscribe:
    post:
      tags:
        - data
      summary: Subscribe to streaming data from an attribute on a device
      description: Subscribe to streaming data from an attribute on a device
      operationId: dataSubscribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request 
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'     

##
  /data/unsubscribe:
    post:
      tags:
        - data
      summary: Unsubscribe to streaming data from an attribute on a device
      description: Unsubscribe to streaming data from an attribute on a device
      operationId: dataUnsubscribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'

##
  /data/discover:
    post:
      tags:
        - data
      summary: Discover services on a device
      description: Discover services on a device
      operationId: dataDiscover
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse'

##
  /registration/registerDataApp:
    post:
      tags:
        - registrations
      summary: Register a Data App
      description: Register a Data App
      operationId: registerDataApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataApp'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request 
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 
         
##
  /registration/unregisterDataApp:
    post:
      tags:
        - registrations
      summary: Unregister a Data App
      description: Unregister a Data App
      operationId: unregisterDataApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataApp'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 
                
##          
  /registration/registerTopic:
    post:
      tags:
        - registrations
      summary: Register a publish/subscribe topic
      description: Register a publish/subscribe topic
      operationId: registerTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataStream'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request 
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 

##    
  /registration/unregisterTopic:
    post:
      tags:
        - registrations
      summary: unregister a publish/subscribe topic
      description: unregister a publish/subscribe topic
      operationId: unregisterTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 
          
components:
  schemas:
# BLE objects    
##  An array for BLE services 
    BLEServiceslist:
      required:
        - services
      type: object
      properties:
        services:
          type: array
          xml:
            name: services
            wrapped: true
          items:
            $ref: '#/components/schemas/BLEService'
      xml:
        name: BLEServiceslist

## A BLE service with its characteristics      
    BLEService:
      required:  
        - serviceID
        - characteristics
      type: object
      properties:
        serviceID:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
        characteristics:
          type: array
          xml:
            name: characteristics
            wrapped: true
          items:
            $ref: '#/components/schemas/BLECharacteristic'
      xml:
        name: BLEService        
        
## A BLE characteristics with its descriptors
    BLECharacteristic:
      required:
        - characteristicID
        - flags
        - descriptors
      type: object
      properties:
        characteristicID:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
        flags:
          type: array
          example:
          - read
          - write
          items:
            type: string
            enum:
              - read
              - write
              - notify
        descriptors:
          type: array
          xml:
            name: descriptors
            wrapped: true
          items:
            $ref: '#/components/schemas/BLEDescriptor'
      xml:
        name: BLECharacteristic  
        
## A BLE descriptor      
    BLEDescriptor:
      required:
        - descriptorID
      type: object
      properties:
        descriptorID:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      xml:
        name: BLEDescriptor 

## BLE service ID only
    BLEServiceID:
      type: object
      properties:
        serviceID:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      xml:
        name: BLEServiceID

## Attributes that define a BLE attribute
    BLEAttributes:
      required:
        - ble
      type: object
      properties:
        ble: 
          required:  
            - serviceID
            - characteristicID
          type: object
          properties:
            serviceID:
              type: string
              format: uuid
              example: 12345678-1234-5678-1234-56789abcdef4
            characteristicID:
              type: string
              format: uuid
              example: 12345678-1234-5678-1234-56789abcdef4
      xml:
        name: BLEAttributes     

## Defines different types of BLE topics
    BLETopic:
      required:
        - ble
      type: object
      properties:
        ble:
          oneOf:
            - $ref: '#/components/schemas/BLEGattTopic'
            - $ref: '#/components/schemas/BLEAdvTopic'
      xml:
        name: BLETopic
 
## BLE Gatt Topic definition      
    BLEGattTopic:
      required:
        - type
        - serviceID
        - characteristicID
      type: object
      properties:
        type:
          type: string
          example: gatt
          enum:
            - gatt
        serviceID:
          type: string
          example: 12345678-1234-5678-1234-56789abcdef0
        characteristicID:
          type: string
          example: 12345678-1234-5678-1234-56789abcdef1
      xml:
        name: BLEGattTopic 

## BLE Advertisement Topic definition   
    BLEAdvTopic:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          example: advertisements
          enum:
            - advertisements
      xml:
        name: BLEAdvTopic 


# Common objects
## An object can be a device or a device group, both identified with an ID
    Object:
      required:
        - id
        - controlApp
        - technology
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
        controlApp:
          type: string
          example: https://control-app-1
        technology:
          type: string
          example: ble
          enum:
            - ble
      xml:
        name: Object

## A Service is an object with optional service ID's
    Service:
      allOf:    
        - $ref: '#/components/schemas/Object'
      type: object
      properties:
        ble:
          type: object
          properties: 
            services:
              type: array
              xml:
                name: services
                wrapped: true
              items:
                $ref: '#/components/schemas/BLEServiceID'
          xml:
            name: ble
      xml:
        name: Service
        
## A specific attribute of an object    
    Attribute:
      allOf:    
        - $ref: '#/components/schemas/Object'
      oneOf:
        - $ref: '#/components/schemas/BLEAttributes'
      discriminator:
        propertyName: technology
        mapping:
          ble: '#/components/schemas/BleAttributes'
      xml:
        name: Attribute

## A value of an attribute of an Object
    AttributeValue:
      allOf:    
        - $ref: '#/components/schemas/Attribute'
      required:
        - value
      type: object
      properties:
        value:
          type: string
          format: byte
          example: 0001
      xml:
        name: AttributeValue
    
## A subscription attribute of an object
    Subscription:
      allOf:
        - $ref: '#/components/schemas/Attribute'
      type: object
      properties:
        topic:
          type: string
          example: enterprise/hospital/pulse_oximeter       
        dataFormat:
          type: string
          example: payload
          enum:
            - payload
            - full
      xml:
        name: Subscription
        
##  DataApp definition for registering a data app   
    DataApp:
      required:
        - controlApp
        - topic
        - dataApps
      type: object
      properties:
        controlApp:
          type: string
          example: https://control-app-1
        topic:
          type: string
          example: enterprise/hospital/pulse_oximeter       
        dataApps:
          type: array
          xml:
            name: dataApps
            wrapped: true
          items:
            type: object
            properties:
              dataAppID:
                type: string
                example: https://data-app-1
      xml:
        name: DataApp
        
## DataStream Topic
    Topic:
      required:
          - id
          - controlApp
          - topic
          - technology
      type: object
      properties:
        ids:
          type: array
          items:
            format: uuid
          example:
          - 12345678-1234-5678-1234-56789abcdef4
        controlApp:
          type: string
          example: https://control-app-1
        technology:
          type: string
          example: ble
          enum:
            - ble
        topic:
          type: string
          example: enterprise/hospital/pulse_oximeter       
      xml:
        name: Topic

## Fully defined datastream Topic
    DataStream:
      allOf:
        - $ref: '#/components/schemas/Topic'    
      oneOf:
        - $ref: '#/components/schemas/BLETopic'
      discriminator:
        propertyName: technology
        mapping:
          ble: '#/components/schemas/BLETopic'
      type: object
      properties:
        dataFormat:
          type: string
          example: default
          enum:
            - default
            - payload
      xml:
        name: DataStream

## Defines an operation in a bulk API      
    Operation:
      required:
        - operation
      type: object
      properties:
        operation:
          type: string
          example: /connectivity/connect
          enum:
            - /connectivity/connect
            - /connectivity/disconnect
            - /data/read
            - /data/write
          anyOf:
            - $ref: '#/components/schemas/Service'
            - $ref: '#/components/schemas/Object'
            - $ref: '#/components/schemas/Attribute'
            - $ref: '#/components/schemas/AttributeValue'
          discriminator:
            propertyName: operation
            mapping:
              /connectivity/connect: '#/components/schemas/Service'
              /connectivity/disconnect: '#/components/schemas/Object' 
              /data/read: '#/components/schemas/Attribute'
              /data/write: '#/components/schemas/AttributeValue'
      xml:
        name: Operation

    
# responses    
## Baseline success reponse
    SuccessResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          example: SUCCESS
          enum:
            - SUCCESS
        id:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
        requestID:
          type: string
          example: 12345678-5678-1234-5578-abcdef1234
  
## Error 500 application Failure response
    FailureResponse:
      required:
        - status
        - errorCode
      type: object
      properties:
        status:
          type: string
          example: FAILURE
          enum:
            - FAILURE
        reason:
          type: string
          example: object not found
        errorCode:
          type: integer
          format: int32
          example: 12
        requestID:
          type: string
          example: 12345678-5678-1234-5578-abcdef1234
 
## Success response for introduce API
    IntroduceResponse:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponse'
      xml:
        name: IntroduceResponse
        
 ## Returns discovered services
    ServiceResponse:
      allOf:    
        - $ref: '#/components/schemas/SuccessResponse'
      oneOf:
        - $ref: '#/components/schemas/BLEServiceslist'
      xml:
        name: ServiceResponse

## Returns an attribute value
    AttributeValueResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
      required:
       - value
      type: object
      properties:
        value:
          type: string
          example: 01
          format: byte
      xml:
        name: AttributeValueResponse
        
## Returns a topic
    TopicResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
      required:
        - topic
      type: object
      properties:
        topic:
          type: string
          example: enterprise/hospital/pulse_oximeter  
      xml:
        name: TopicResponse
 # API key authorization           
  securitySchemes:
    ApiKeyAuth:       
      type: apiKey
      in: header      
      name: X-API-KEY  
# Apply the API key globally to all operations
security:
  - ApiKeyAuth: [] 