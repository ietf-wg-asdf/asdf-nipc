openapi: 3.0.3
info:
  title: Non IP Device Control (NIPC) API
  description: |-
    This API specifies RESTful application layer interface for gateways providing operations against non-IP devices. The described interface is extensible. The examples includes leverage Bluetooth Low Energy and Zigbee as they are commonly deployed.
  termsOfService: http://swagger.io/terms/
  contact:
    email: bbrinckm@cisco.com
  license:
    name: TBD
    url: TBD
  version: 0.4.5
externalDocs:
  description: NIPC IETF draft
  url: https://datatracker.ietf.org/doc/draft-ietf-asdf-nipc/
servers:
  - url: "{gw-host}/nipc-draft04"
    variables:
      gw_host:
        default: localhost
        description: Gateway Host
tags:
  - name: NIPC property APIs
    description: |-
      APIs that allow apps to get and update device properties. If the underlying protocol requires connection management, it will be performed as part of the API call.
  - name: NIPC event APIs
    description: |-
      APIs that allow apps to enable or disable event reporting on devices. If the underlying protocol requires connection management, it will be performed as part of the API call.
  - name: NIPC action APIs
    description: |-
      APIs that perform actions on devices.
  - name: NIPC action APIs with embedded protocol mapping
    description: |-
      APIs that perform actions on devices, but do not use registered properties, events or ation. These API's have embedded protocol mappings
  - name: NIPC registration APIs
    description: |-
      APIs that register sdf models or data applications
  - name:  NIPC API extensions
    description: |-
      APIs that simplify application interaction by implementing one or more basic API's into a single API call.

paths:
### NIPC Property APIs
  /{id}/property/{property}:
    put:
      tags:
        - NIPC property APIs
      summary: Write a value to a property on a device
      description: |-
        Write a value to a property on a device. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. Id cannot be a group-id.
      operationId: UpdateProperty
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: property
        in: path
        description: property that needs to be filtered
        required: true
        schema:
          type: string
          example: "temperature"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Value'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/PropertyValue'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'

    get:
      tags:
        - NIPC property APIs
      summary: Read a value from a property on a device
      description: |-
        Read a value to a property on a device. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. Id cannot be a group-id.
      operationId: GetProperty
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: property
        in: path
        description: property that needs to be filtered
        required: true
        schema:
          type: string
          example: "temperature"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/PropertyValue'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'

  /{id}/property:
    put:
      tags:
        - NIPC property APIs
      summary: Update a value of one or more properties on a device
      description: |-
        Write a value to a property or multiple properties to a device. If underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. 
      operationId: UpdateProperties
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyValueArray'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/PropertyValueResponseArray'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request       
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 

    get:
      tags:
        - NIPC property APIs
      summary: Read a value from one or multiple properties on a device
      description: |-
        Read a value to a property or multiple properties from a device. If underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. 
      operationId: GetProperties
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: property
        in: query
        description: properties that needs to be filtered, multiple values are comma-separated
        required: true
        schema:
          type: string
          example: "temperature"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/PropertyValueResponseArray'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'
 
 ### NIPC Event APIs
  /{id}/event/{event}:
    post:
      tags:
        - NIPC event APIs
      summary: Enable an event on a specific a device
      description: |-
        Enable an event on a specific a device. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it.
      operationId: EnableEvent
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: event
        in: path
        description: event that needs to be enabled
        required: true
        schema:
          type: string
          example: "patient/heartbeat"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Event'                  
                
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request 
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/EventErrorCodes'
  
    delete:
      tags:
        - NIPC event APIs
      summary: Disable an event on a specific a device
      description: |-
        Disable an event on a specific a device. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. 
      operationId: DisableEvent
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: event
        in: path
        description: event that needs to be disabled
        required: true
        schema:
          type: string
          example: "patient/heartbeat"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'  
                  - $ref: '#/components/schemas/Event' 
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/EventErrorCodes'
                
    get:
      tags:
        - NIPC event APIs
      summary: Get status of an event on a specific a device
      description: |-
        Get status of an event on a specific a device. Success is event is active, failure if event not active. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. 
      operationId: GetEvent
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: event
        in: path
        description: event that needs to be filtered
        required: true
        schema:
          type: string
          example: "patient/heartbeat"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Event' 
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/EventErrorCodes'

  /{id}/event/:
    get:
      tags:
        - NIPC event APIs
      summary: Get status of events on a device or group of devices
      description: |-
        Get status of an event or multiple events on a specific a device. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. Id is a device-id or group-id
      operationId: GetEvents
      parameters:
      - name: id
        in: path
        description: device or group id that need to be filtered
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: event
        in: query
        description: events that needs to be filtered, multiple values are comma-separated
        required: true
        schema:
          type: string
          example: "patient/heartbeat"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/EventStatusResponseArray'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/EventErrorCodes'

### NIPC action APIs
  /{id}/action/{property}:
    put:
      tags:
        - NIPC action APIs
      summary: Perform an action on a property on a device
      description: |-
        Perform an action on a property on a device. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. Id cannot be a group-id.
      operationId: ActionProperty
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: property
        in: path
        description: property that needs to be filtered
        required: true
        schema:
          type: string
          example: "lightswitch"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Value'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/PropertyValue'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'   
                  
  /{id}/action/broadcast:
    post:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Broadcast to a device
      description: |-
        Broadcast a payload to a device. The broadcast is performed on the AP where the device was last seen
      operationId: ActionBroadcast
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Broadcast'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/BroadcastErrorCodes'
                  
  /{id}/action/connection:
    post:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Connect a device
      description: |-
        Connect a device. 3 retries by default, optionally retry policy can be defined in the API body. If the protocol requires service discovery, full service discovery will be performed, unless specific services are described in the API body.
      operationId: ActionCreateConnection
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Connection'
                - $ref: '#/components/schemas/ProtocolMap-ServiceList'
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse' 
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/ProtocolMap-ServiceMap'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/ConnectionErrorCodes'
                  - $ref: '#/components/schemas/ProtocolMap-ErrorCodes'
  
    put:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Update cached ServiceMap for a device.
      description: |-
        Update cached ServiceMap for a device. Full service discovery will be performed, unless specific services are described in the API body.
      operationId: ActionUpdateServiceMap
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMap-ServiceList'
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse' 
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/ProtocolMap-ServiceMap'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/ConnectionErrorCodes'
                  - $ref: '#/components/schemas/ProtocolMap-ErrorCodes'
  
    delete:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Disconnect a device 
      description: |-
        Disconnect a device. 3 retries by default, optionally retry policy can be defined in the API body. If the protocol requires service discovery, full service discovery will be performed, unless specific services are described in the API body.
      operationId: ActionDeleteConnection
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/ConnectionErrorCodes'
                  
    get:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Get connection state for a device
      description: |-
        Get connection status for a device. Success when device(s) is/are connected, includes service map for the device if available. Failure when a device is not connected
      operationId: ActionGetConnection
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse' 
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/ProtocolMap-ServiceMap'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/ConnectionErrorCodes'
                  - $ref: '#/components/schemas/ProtocolMap-ErrorCodes'
 
  /{id}/action/property/write:
    post:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Write a value to an property using protocol mapping
      description: |-
        Write a value to an unregistered property, embedding property protocol mapping in the API, this does not require
        property registration. You cannot write to a group id.
      operationId: ActionPropWrite
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Value' 
                - $ref: '#/components/schemas/ProtocolMap-Property'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Value'
                  - $ref: '#/components/schemas/ProtocolMap-Property'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'
                
  /{id}/action/property/read:
    post:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Write a value to an property using protocol mapping
      description: |-
        Read a value from an unregistered property, embedding property protocol mapping in the API, this does not require
        property registration. You cannot read from a group id.
      operationId: ActionPropRead
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMap-Property'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Value'
                  - $ref: '#/components/schemas/ProtocolMap-Property'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'

  /{id}/action/event/start:
    post:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Tell a device to start reporting an event using a protocol mapping
      description: |-
        Tell a device to start reporting an event, embedding property protocol mapping in the API, this does not require
        property registration. You cannot read from a group id.
      operationId: ActionEventStart
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMap-Property'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request 
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/EventErrorCodes'
  
  /{id}/action/event/stop:
    post:
      tags:
        - NIPC action APIs with embedded protocol mapping
      summary: Tell a device to stop reporting an event using a protocol mapping
      description: |-
        Tell a device to stop reporting an event, embedding property protocol mapping in the API, this does not require
        property registration. You cannot read from a group id.
      operationId: ActionEventStop
      parameters:
        - name: id
          in: path
          description: device id that need to be filtered, group id not allowed
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMap-Property'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'          
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request 
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/EventErrorCodes'
 
### Registrations
  /registration/sdfobject/{sdfobject}:
    post:
      tags:
        - NIPC registration APIs
      summary: Register an sdfObject
      description: |-
        Register an sdfObject, including Properties, Events and actions
      operationId: registerSdfObject
      parameters:
        - name: sdfobject
          in: path
          description: sdfObject name
          required: true
          schema:
            type: string
            example: "temperature-sensor"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SdfObject'
                - $ref: '#/components/schemas/Id'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/SdfObject'
                  - $ref: '#/components/schemas/Id'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/RegistrationErrorCodes'
 
    put:
      tags:
        - NIPC registration APIs
      summary: Update an sdfObject
      description: |-
        Update an sdfObject, including Properties, Events and actions
      operationId: updateSdfObject
      parameters:
        - name: sdfobject
          in: path
          description: sdfObject name
          required: true
          schema:
            type: string
            example: "temperature-sensor"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SdfObject'
                - $ref: '#/components/schemas/Id'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/SdfObject'
                  - $ref: '#/components/schemas/Id'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/RegistrationErrorCodes'
 
    delete:
      tags:
        - NIPC registration APIs
      summary: Delete an sdfObject
      description: |-
        Delete an sdfObject, including Properties, Events and actions
      operationId: deleteSdfObject
      parameters:
        - name: sdfobject
          in: path
          description: sdfObject name
          required: true
          schema:
            type: string
            example: "temperature-sensor"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/SdfObject'
                  - $ref: '#/components/schemas/Id'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/RegistrationErrorCodes'

    get:
      tags:
        - NIPC registration APIs
      summary: get a registered sdfObject
      description: |-
        Get an sdfObject, including Properties, Events and actions
      operationId: getSdfObject
      parameters:
        - name: sdfobject
          in: path
          description: sdfObject name
          required: true
          schema:
            type: string
            example: "temperature-sensor"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/SdfObject'
                  - $ref: '#/components/schemas/Id'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/RegistrationErrorCodes'

  /registration/data-app/{data-app}:
    post:
      tags:
        - NIPC registration APIs
      summary: Register a dataApp
      description: |-
        Register a dataApp that is able to receive device data. 
      operationId: registerDataApp
      parameters:
        - name: data-app
          in: path
          description: id of the data app that will be registered
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataApp'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/DataApp'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/RegistrationErrorCodes'

    put:
      tags:
        - NIPC registration APIs
      summary: Update registration of a dataApp
      description: |-
        Update registration of a dataApp that is able to receive device data. 
      operationId: UpdateDataApp
      parameters:
        - name: data-app
          in: path
          description: id of the data app that will be updated
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataApp'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/DataApp'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/RegistrationErrorCodes'
                  
    delete:
      tags:
        - NIPC registration APIs
      summary: Delete registration of a dataApp
      description: |-
        Delete registration of a dataApp that is able to receive device data. 
      operationId: DeleteDataApp
      parameters:
        - name: data-app
          in: path
          description: id of the data app that will be updated
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/DataApp'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/RegistrationErrorCodes'
  
    get:
      tags:
        - NIPC registration APIs
      summary: Get registration of a dataApp
      description: |-
        Get registrationdetails of a dataApp that is able to receive device data. 
      operationId: GetDataApp
      parameters:
        - name: data-app
          in: path
          description: id of the data app that will be updated
          required: true
          schema:
            type: string
            format: uuid
            example: 12345678-1234-5678-1234-56789abcdef4
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/DataApp'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/RegistrationErrorCodes'

### Extensions
  /{id}/extension/property/{property}/file:
    put:
      tags:
        - NIPC API extensions
      summary: Write a file to a property on a device
      description: |-
        Write a file to a property on a device. Will chunk up the file and perform multiple writes. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. Id cannot be a group-id.
      operationId: writeFile
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: property
        in: path
        description: property that needs to be filtered
        required: true
        schema:
          type: string
          example: "firmware"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Extension-File'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Property'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'
  
  /{id}/extension/property/{property}/blob:
    put:
      tags:
        - NIPC API extensions
      summary: Write a binary blob to a property on a device
      description: |-
        Write a binary blob to a property on a device. Will chunk up the binary blob and perform multiple writes. If the underlying protocol requires a connection to be set up, this API call will perform the necessary connection management. If a connection is already active for this device, the existing connection will be leveraged without modifying it. Id cannot be a group-id.
      operationId: writeBlob
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      - name: property
        in: path
        description: property that needs to be filtered
        required: true
        schema:
          type: string
          example: "bin_blob"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Extension-Blob'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Property'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'
  
  /{id}/extension/firmware:
    put:
      tags:
        - NIPC API extensions
      summary: Upgrade the firmware of a device
      description: |-
        Update the firmware of a device. Will perform all operations required to upgrade the firmware. Id cannot be a group-id.
      operationId: upgradeFirmware
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Extension-File'
                - $ref: '#/components/schemas/Extension-Firmware'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Extension-UpgradeStatus'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureResponse' 
                  
    get:
      tags:
        - NIPC API extensions
      summary: Get the status of a firmware upgrade of a device
      description: |-
        Get the status of a firmware upgrade of a device. REturns success when ongoing or completed, with a reason. Returns failure when upgrade has failed. Id cannot be a group-id.
      operationId: upgradeFirmwareStatus
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/Id'
                  - $ref: '#/components/schemas/Extension-UpgradeStatus'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FailureResponse' 
  
  /{id}/extension/bulk:
    post:
      tags:
        - NIPC API extensions
      summary: Compound operations on a device
      description: Compound operations on a device
      operationId: Bulk
      parameters:
      - name: id
        in: path
        description: device id that need to be filtered, group id is not allowed
        required: true
        schema:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Extension-Bulk'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension-BulkResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '405':
          description: Invalid request
        '500':
          description: Server-side failure
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/FailureResponse' 
                  - $ref: '#/components/schemas/PropertyErrorCodes'
                  - $ref: '#/components/schemas/EventErrorCodes'
                  - $ref: '#/components/schemas/ConnectionErrorCodes'
                  - $ref: '#/components/schemas/BroadcastErrorCodes'

components:
  schemas:
# Base objects
## A SCIM id, can be a device or a group
    Id:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: A SCIM-generated UUID, can be a device or group
          example: 12345678-1234-5678-1234-56789abcdef4
          
## A property
    Property:
      required:
        - property
      type: object
      properties:
        property:
          type: string
          example: "temperature"

## A value 
    Value:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          format: byte
          example: dGVzdA==

## A value of an property of an Device
    PropertyValue:
      allOf:
        - $ref: '#/components/schemas/Property'
        - $ref: '#/components/schemas/Value'

## An array of Property values
    PropertyValueArray:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyValue'

## Event
    Event:
      required:
        - event
      type: object
      properties:
        event:
          type: string
          example: enterprise/hospital/pulse_oximeter
            
## A Connection
    Connection:
      type: object
      properties:
        retries:
          type: integer
          format: int32
          example: 3
        retryMultipleAPs:
          type: boolean
          example: true
        
## A broadcast
    Broadcast:
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/ProtocolMap-Broadcast'
      required:
        - cycle
      type: object
      properties:
        cycle:
          type: string
          example: single
          enum:
            - single
            - repeat
        # broadcast time in ms
        broadcastTime:
          type: integer
          example: 3000
        # interval between broadcasts in ms
        broadcastInterval:
          type: integer
          example: 500
        payload:
          type: string
          format: byte
          example: AgEaAgoMFv9MABAHch9BsDkgeA==
          
 ## DataApp
    DataApp:
      oneOf:
        - $ref: '#/components/schemas/DataAppMqttClient'
        - $ref: '#/components/schemas/DataAppMqttBroker'
        - $ref: '#/components/schemas/DataAppWebhook'
        - $ref: '#/components/schemas/DataAppWebsocket'
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'


    DataAppMqttClient:
      type: object
      properties: 
        mqttclient:
          type: object

    DataAppMqttBroker:
      type: object
      properties: 
        mqttbroker:
          type: object
          properties: 
            URI: 
              type: string
              example: mqtt.broker.com:8883
            username:
              type: string
              example: user1
            password: 
              type: string
              example: password1
            brokerCACert: 
              type: string         
      
    DataAppWebhook:
      type: object
      properties: 
        webhook:
          type: object
          properties: 
            URI: 
              type: string
              example: webhook.com:443
            apiKey:
              type: string
              example: fjelk-3dl33f-2wdsd
            serverCACert: 
              type: string 
          
    DataAppWebsocket:
      type: object
      properties: 
        websocket:
          type: object
          properties: 
            URI: 
              type: string
              example: websocket.com:443
            apiKey:
              type: string
              example: fjelk-3dl33f-2wdsd
            serverCACert: 
              type: string 

 ## sdfObject registration definition
    SdfObject:
      type: object
      description: Sample SDF object
      properties: 
        object-name:
          anyOf:
            - $ref: '#/components/schemas/SdfProperty'
            - $ref: '#/components/schemas/SdfEvent'
            - $ref: '#/components/schemas/SdfAction'

    SdfProperty:
      type: object
      description: Sample SDF property
      properties: 
        property-name: #example, this will be the registered property
          allOf:
            - $ref: '#/components/schemas/ProtocolMap-Property'
          
    SdfEvent:
      type: object
      description: Sample SDF property
      properties: 
        event-name: #example, this will be the registered event
          type: object
          properties:
            sdfOutputData:
              allOf:
                - $ref: '#/components/schemas/ProtocolMap-Event'
    
    SdfAction:
      type: object
      description: Sample SDF property
      properties: 
        action-name: #example, this will be the registered action
          allOf:
            - $ref: '#/components/schemas/ProtocolMap-Property'

# responses
## Baseline success reponse
    SuccessResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          example: SUCCESS
          enum:
            - SUCCESS
        requestID:
          type: string
          example: 12345678-5678-1234-5578-abcdef1234

## Error 500 application Failure response
    FailureResponse:
      required:
        - status
        - errorCode
      type: object
      properties:
        status:
          type: string
          example: FAILURE
          enum:
            - FAILURE
        reason:
          type: string
          example: Not Found
        errorCode:
          type: integer
          format: int32
          enum: 
            - 2000 # Generic catch-all error code for any API
            - 2001 # Invalid device ID or gateway doesn't recognize the ID
            - 2002 # Group ID not allowed
        requestID:
          type: string
          example: 12345678-5678-1234-5578-abcdef1234
    
    ConnectionErrorCodes:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          enum:
            - 1000 # Device already connected
            - 1001 # No connection found for device
            - 1002 # Connection timeout
            - 1003 # Connection failed

    PropertyErrorCodes:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          enum:
            - 1100 # Property not found
            - 1101 # Property not writeable
            - 1102 # Property not readable
            - 1103 # Invalid protocol mapping

    EventErrorCodes:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          enum:
            - 1200 # Event not found
            - 1201 # Event already started
            - 1202 # Event already stopped
            - 1203 # Invalid protocol mapping

    BroadcastErrorCodes:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          enum:
            - 1300 # Invalid broadcast data

    RegistrationErrorCodes:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          enum:
            - 1400 # Invalid schema
            - 1401 # Invalid property identifier
            - 1402 # Invalid event identifier
            - 1403 # Invalid action identifier

## Property operations responses
    PropertyValueSuccess:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - $ref: '#/components/schemas/PropertyValue'   
    
    PropertyValueResponseArrayItem:
      oneOf:
        - $ref: '#/components/schemas/PropertyValueSuccess'
        - $ref: '#/components/schemas/FailureResponse'
    
    PropertyValueResponseArray:
      type: object
      properties:
        properties:
          type: array
          items:
              $ref: '#/components/schemas/PropertyValueResponseArrayItem'

## Event operations responses
    EventStatusResponseArrayItem:
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/Event' 
      oneOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - $ref: '#/components/schemas/FailureResponse'

    EventStatusResponseArray:
      type: object
      properties:
        events:
          type: array
          items:
              $ref: '#/components/schemas/EventStatusResponseArrayItem'

# Protocol Mapping
## Protocol Map for Service Discovery
    ProtocolMap-ServiceList:
      type: object
      properties:
        protocolmap:
          oneOf:
            - $ref: '#/components/schemas/ProtocolMap-BLE-ServiceList'

## Protocol Map for Service Discovery result
    ProtocolMap-ServiceMap:
      type: object
      properties:
        protocolmap:
          oneOf:
            - $ref: '#/components/schemas/ProtocolMap-BLE-ServiceMap'
            - $ref: '#/components/schemas/ProtocolMap-Zigbee-ServiceMap'
        
## Protocol Map for Error Codes
    ProtocolMap-ErrorCodes:
      type: object
      properties:
        protocolmap:
          oneOf:  
            - $ref: '#/components/schemas/ProtocolMap-BLE-ErrorCodes'
            - $ref: '#/components/schemas/ProtocolMap-Zigbee-ErrorCodes'

## Protocol Map for Broadcasts
    ProtocolMap-Broadcast:
      type: object
      properties:
        protocolmap:
          oneOf:  
            - $ref: '#/components/schemas/ProtocolMap-BLE-Broadcast'
            - $ref: '#/components/schemas/ProtocolMap-Zigbee-Broadcast'

## Protocol Map for a property
    ProtocolMap-Property:
      type: object
      properties:
        protocolmap:
          oneOf:  
            - $ref: '#/components/schemas/ProtocolMap-BLE-Propmap'
            - $ref: '#/components/schemas/ProtocolMap-Zigbee-Propmap'

## Protocol Map for an event
    ProtocolMap-Event:
      type: object
      properties:
        protocolmap:
          oneOf:  
            - $ref: '#/components/schemas/ProtocolMap-BLE-Event'
            - $ref: '#/components/schemas/ProtocolMap-Zigbee-Event'
 
# BLE Protocol Mapping
## A Service is a device with optional service IDs
    ProtocolMap-BLE-ServiceList:
      type: object
      properties:
        ble:
          type: object
          properties:
            services:
              type: array
              items:
                type: object
                properties:
                  serviceID:
                    type: string
                    format: uuid
                    example: 12345678-1234-5678-1234-56789abcdef4
            cached:
              description: |-
                If we can cache information, then device doesn't need
                to be rediscovered before every connected.
              type: boolean
              default: false
            cacheIdlePurge:
              description: cache expiry period, when device allows
              type: integer
              example: 3600 # default 1 hour
            autoUpdate:
              description: |-
                autoupdate services if device supports it (default)
              type: boolean
              example: true
            bonding: #optional, by default defined in SCIM object 
              type: string
              example: default
              enum:
                - default 
                - none
                - justworks
                - passkey
                - oob

##  Protocol Mapping for BLE Service Map
    ProtocolMap-BLE-ServiceMap:
      required:
        - services
      type: object
      properties:
        ble:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMap-BLE-Service'

    ProtocolMap-BLE-Service:
      required:
        - serviceID
        - characteristics
      type: object
      properties:
        serviceID:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMap-BLE-Characteristic'

    ProtocolMap-BLE-Characteristic:
      required:
        - characteristicID
        - flags
        - descriptors
      type: object
      properties:
        characteristicID:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4
        flags:
          type: array
          example:
          - read
          - write
          items:
            type: string
            enum:
              - read
              - write
              - notify
        descriptors:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMap-BLE-Descriptor'

    ProtocolMap-BLE-Descriptor:
      required:
        - descriptorID
      type: object
      properties:
        descriptorID:
          type: string
          format: uuid
          example: 12345678-1234-5678-1234-56789abcdef4

##  Protocol Mapping for BLE Broadcast
    ProtocolMap-BLE-Broadcast:
      required:
        - ble
      type: object
      properties:
        ble:
          type: object

## Protocol Mapping for BLE Property
    ProtocolMap-BLE-Propmap:
      required:
        - ble
      type: object
      properties:
        ble:
          required:
            - serviceID
            - characteristicID
          type: object
          properties:
            serviceID:
              type: string
              format: uuid
              example: 12345678-1234-5678-1234-56789abcdef4
            characteristicID:
              type: string
              format: uuid
              example: 12345678-1234-5678-1234-56789abcdef4
              
## Defines different types of BLE events
    ProtocolMap-BLE-Event:
      required:
        - ble
      type: object
      properties:
        ble:
          required:
            - type
          type: object
          properties:
            type:
              type: string
              example: gatt
              enum:
                - gatt
                - connection_events
                - advertisements
            serviceID:
              type: string
              example: 12345678-1234-5678-1234-56789abcdef0
            characteristicID:
              type: string
              example: 12345678-1234-5678-1234-56789abcdef1

## BLE Error codes
    ProtocolMap-BLE-ErrorCodes:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          enum:
            - 1011 # BLE bonding failed
            - 1013 # BLE service discovery failed

# Zigbee Protocol Mapping
##  Protocol Mapping for Zigbee Service Map
    ProtocolMap-Zigbee-ServiceMap:
      required:
        - zigbee
      type: object
      properties:
        zigbee:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMap-Zigbee-Endpoint'

    ProtocolMap-Zigbee-Endpoint:
      required:
        - endpointID
        - clusters
      type: object
      properties:
        endpointID:
          type: integer
          format: int32
          example: 10
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMap-Zigbee-Cluster'

    ProtocolMap-Zigbee-Cluster:
      required:
        - clusterID
        - properties
      type: object
      properties:
        clusterID:
          type: integer
          format: int32
          example: 0
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolMap-Zigbee-Property'

    ProtocolMap-Zigbee-Property:
      required:
        - propertyID
        - propertyType
      type: object
      properties:
        propertyID:
          type: integer
          format: int32
          example: 1
        propertyType:
          type: integer
          format: int32
          example: 32
          
## Protocol Mapping for Zigbee broadcast
    ProtocolMap-Zigbee-Broadcast:
      required:
        - zigbee
      type: object
      properties:
        zigbee:
          type: object

## Protocol mapping for Zigbee property
    ProtocolMap-Zigbee-Propmap:
      required:
        - zigbee
      type: object
      properties:
        zigbee:
          required:
            - endpointID
            - clusterID
            - propertyID
          type: object
          properties:
            endpointID:
              type: integer
              format: int32
              example: 1
            clusterID:
              type: integer
              format: int32
              example: 6
            propertyID:
              type: integer
              format: int32
              example: 16
            type:
              type: integer
              format: int32
              example: 1

    ProtocolMap-Zigbee-Event:
      allOf:  
        - $ref: '#/components/schemas/ProtocolMap-Zigbee-Propmap'

## Zigbee Error codes
    ProtocolMap-Zigbee-ErrorCodes:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          enum:
            - 1021 # Zigbee join failed
  
# Extensions
## A File Extension
    Extension-File:
      required:
        - fileURL
      type: object
      properties:
        fileURL:
          type: string
          example: "https://domain.com/firmware.dat"
        chunksize:
          type: integer

## A binary blob Extension
    Extension-Blob:
      required:
        - blob
      type: object
      properties:
        blob:
          type: string
          format: byte
        chunksize:
          type: integer

## a Firmware Extension
    Extension-Firmware:
      type: object
      properties:
        firmware:
          type: string
          enum:
            - nordic
            - silabs

## Firmware upgrade status extension
    Extension-UpgradeStatus:
      type: object
      properties:
        upgradeStatus:
          type: string
          enum:
            - started
            - completed
            - in progress
            - rolled-back
            - failed

## Bulk schema Extension
    Extension-Bulk:
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Extension-BulkOperation'

## Extension that defines an operation in a bulk API
    Extension-BulkOperation:
      required:
        - operation
      allOf:
        - type: object
          properties:
            path:
              type: string
              enum:
                - /property
                - /event
                - /connection
                - /broadcast
            method:
              type: string
              enum:
               - POST
               - PUT
               - DELETE
               - GET
          oneOf:
            - $ref: '#/components/schemas/PropertyValueArray'
            - $ref: '#/components/schemas/Event'
            - $ref: '#/components/schemas/Connection'
            - $ref: '#/components/schemas/Broadcast'
          discriminator:
            propertyName: operation
            mapping:
              PUT /property:
                '#/components/schemas/PropertyValueArray'
              GET /property:
                '#/components/schemas/PropertyValueArray'
              POST /event:
                '#/components/schemas/Event'
              DELETE /event:
                '#/components/schemas/Event'
              GET /event:
                '#/components/schemas/Event'
              POST /connection:
                '#/components/schemas/Connection'
              PUT /connection:
                '#/components/schemas/Connection'
              DELETE /connection:
                '#/components/schemas/Connection'
              GET /connection:
                '#/components/schemas/Connection'
              POST /broadcast:
                '#/components/schemas/Broadcast'

## Multiple returns for a bulk operation
    Extension-BulkResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - $ref: '#/components/schemas/Id'
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Extension-OperationResponse'

## Return for an operation
    Extension-OperationResponse:
      required:
        - operation
      allOf:
        - type: object
          properties:
            operation:
              type: string
            path:
              type: string
              enum:
                - /property
                - /event
                - /connection
                - /broadcast
            method:
              type: string
              enum:
               - POST
               - PUT
               - DELETE
               - GET
          anyOf:
            - $ref: '#/components/schemas/SuccessResponse'
            - $ref: '#/components/schemas/FailureResponse'
            - $ref: '#/components/schemas/PropertyValueResponseArray'
            - $ref: '#/components/schemas/PropertyErrorCodes'
            - $ref: '#/components/schemas/Event'
            - $ref: '#/components/schemas/EventErrorCodes'
            - $ref: '#/components/schemas/ProtocolMap-ServiceMap'
            - $ref: '#/components/schemas/ConnectionErrorCodes'
            - $ref: '#/components/schemas/ProtocolMap-ErrorCodes'
            - $ref: '#/components/schemas/BroadcastErrorCodes'

