---
title: An Application Layer Interface for Non-IP device control (NIPC)
abbrev: NIPC
docname: draft-brinckman-nipc-00
submissionType: IETF
category: std

ipr: trust200902
keyword: Internet-Draft

stand_alone: no
pi: [toc, sortrefs, symrefs]

author:
 -  ins: B. Brinckman
    name: Bart Brinckman
    org: Cisco Systems
    city: Brussels
    country: Belgium
    email: bbrinckma@cisco.com
 -
    ins: R. Mohan
    name: Rohit Mohan
    org: Cisco Systems
    street: 170 West Tasman Drive
    code: 95134
    city: San Jose
    country: USA
    email: rohitmo@cisco.com

normative:
  BLE53:
    title: Bluetooth Core Specification, Version 5.3
    author:
      -
        org: Bluetooth SIG
    date: 2021
  Zigbee22:
    title: zigbee Specification, Version 22 1.0
    author:
      -
        org: Connectivity Standards Alliance
    date: 2017


--- abstract

This memo specifies RESTful application layer interface for gateways 
providing operations against non-IP devices. The described interface is
extensible. This memo initially describes Bluetooth Low Energy and 
Zigbee as they are the most commonly deployed.

--- middle

Introduction
============

Use cases in building management, healthcare, workplaces, manufacturing,
logistics and hospitality have introduced low-power devices into these 
environments. These devices typically do not support IP-based 
interfaces, hence there is a need for gateway functions to allow these
devices to communicate with the applications that manage them. In 
abscence of a standard describing how applications communicate with such
non-IP devices, vertically integrated infrastructure prolifilates and 
applications have bespoke integrations with that infrastructure for 
every use case. This stunts the eco-system growth. At the same time,
wireless access points have been deployed nearly everywhere, many of 
which have soft or separate radios that can transmit and receive 
different frame types, such as {{BLE53}}.  To avoid the need for 
parallel infrastructure and bespoke application integration, a 
standardized gateway function is necessary.

The gateway provides at a minimum the following functions:
 - authentication and authorization of application clients that
   will access devices
 - the ability to onboard devices that are entended to be deployed 
   within the use case
 - maintenance of an inventory of onboarded devices that are intended to
   access and be accessed by the deployment and applications.
 - interfaces that allow for bi-directional communication to non-IP
   devices
 - one or more channels to process requests, responses, and asymmetric
   communciations with the non-IP radio resources (Access Points) 
   in the system.

Combined with a provisioning interface such as
{{!I-D.shahzad-scim-device-model}}, this specification supports
these aspects, specifically focusing on providing bi-directional 
communication with non-IP devices.

~~~~~


                            +-----------------------------------+
                            |                                   |
    +-----------+   Request |  +---------+                      |
    | onboarding|------------->|  SCIM   |                      |
    |    app    |<-------------| Server  |                      |
    +-----------+  Ctrl Endpt  +---------+                      |
                            |                                   |
    +-----------+           |  +------------+  +-------+  +--+  |
    |  Control  |>...REST...|.>|            |..|  AP   |..|D |  |
    |     &     |           |  |   Gateway  |  +-------+  +--+  |
    | Telemetry |<...MQTT...|.<|            |                   |
    |    Apps   |           |  +------------+                   |
    +-----------+           |                                   |
                            |       Enterprise Deployment       |
                            +-----------------------------------+

~~~~~
{: #arch title="Basic Architecture"}

{{arch}} shows us the application layer gateway (ALG), an access
point (AP), and a device (D) in the enterprise environment.  The role
of the ALG is to provide a gateway to non-IP devices connecting into 
one or more AP. Applications implementing this memo can leverage RESTful
interfaces to communicate with these devices and subscribe to streaming 
data or broadcasts levering MQTT.

The flow of operations are as follows:

1. Authorize application(s) to perform operations. This happens out of
   band and may be accomplished by means of exchanging tokens or public
   keys
   a. Authorize an onboarding appcation against a SCIM endpoint
   supported by the gateway. 
   b. Provision and authorize applications that may control devices.
   c. Provision and authorize applications that may receive telemetry.
2. Provision one or more devices on the gateway leveraging SCIM.

Steps 1 and 2 are not within the scope of this specification, but are
provided for context.

3. Perform RESTful calls to the gateway in order to establish
   bidirectional communication to one or more devices. Optionally set 
   up a publish/subcribe topic to receive streaming data from a device 
   (telemetry interface).
4. Optionally receive streaming data on a pub/sub topic configured by 
   the control interface (telemetry interface)

Step 3 and 4 are the subject of this memo.

This specification is organized into three sections:

- Basic non-IP control functions described in narrative.
- Extensibility of the interfaces.
- Examples of use cases leveraging both BLE and Zigbee-based devices. 
- A specification that can be mapped to a publication/subscribe
  interface, such as MQTT.
- OpenAPI definitions for the control interface and Protobuf definitions 
  for the streaming data interface

## Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14 {{!RFC2119}} {{!RFC8174}} when, and only when, they appear in all
capitals, as shown here.

Non-IP Control Functions
========================

# Approach

In non-IP protocols such as BLE or Zigbee, a number of basic operations
are defined that are fairly similar across protocols. Basic examples of 
this are read and write data. Devices may choose to implement all of the
operations or a subset. For example in BLE a device may choose to 
implement a binding, but could also allow connect without a binding. 
In this memo we have therefore defined a control interface that exposes
these basic operations with a radio-agnostic schema, with radio 
technology specific extensions to allow to transmit and receive 
attributes that are specific to the radio technoligy supported by the 
device. This allows for extensions to the schema to integrate new 
non-ip radio technologies, whithout the need to update the base schema.
~~~~~

    ID
     - device/group attributes
	|
	|> BLE
	|     - BLE attributes
	|
        |> Zigbee
              - Zigbee attributes

~~~~~
{: #schema title="Extensible Schema"}

As shown in {{schema}}, the control interface addresses device and group
objects as IDs, hence the requirement to declare a device to the gateway
before addressing a NIPC operation to the device. This can be done by 
means of SCIM. A NIPC operation can either be performed against a 
device-id or a group-id. The gateway will leverage information from the 
SCIM object to onboard the device for a specific radio technology. 
Please refer to {{!I-D.shahzad-scim-device-model}} for more information
on SCIM device objects.  

Apart from enabling bi-directional communication with non-ip devices,
NIPC also allows an application to register pub/sub topics in order to
support a programmable data streaming interface. 

## Common base schema

As described, most operations are executed against a device or a group.
Control operations refer to either of these as "Object" with an ID as an
identifier. The common schema for Object is defined as follows:


| Attribute     | Req |   Type   |          Example                    |
+---------------+----------+-------------------------------------------|
| id            |  T  |  uuid   | 12345678-1234-5678-1234-56789abcdef4 |
| objectType    |  T  |  enum   | device                               |
| technology    |  F  |  enum   | ble                                  |
{: #objectdef title="Definition of an Object"}

where-

 - id is the id returned in the response when registering a device 
   against a SCIM server.
 - objectType is either "group" or "device".
 - technology is the radio technology extension(s) supported by the 
   device, in this memo either "ble" or "zigbee".

## Connecting to the Non-IP Control Interface

NIPC makes use of RESTful HTTP{{!RFC9114}}.  The connection endpoint is
provided out of band, most likely through the SCIM devices model 
extension, in which an authorized application can be registered for a
SCIM object. Similarly authentication of the interface can be specified
using that SCIM interface. It may be based on a device certificate or 
an authorization token.

# Control Interface Scheme Elements

What follows is a narrative description of each RESTful endpoint
and the parameters that follow at a coarse level.  Additional information
may be necessary based on what non-IP technology is in use.  There are
several groupings available through this model:

 - /connectivity establishes and ends bidirectional communciations
 - /data processes basic protocol operations (reads, writes,
   subscriptions, and device schema discovery)
 - /registrations registers interest in an MQTT topic for telemetry
 - /bulk handles bulk operations


# Connectivity Elements

Connectivity elements are accessed from this group of operations.

## /introduce

This endpoint notifies the network that the device should be
accessible.  The only operation supported is POST.  A single Object
is transmitted in the content.  This operation MUST be performed before
the applications may connect to a device.

### /connection

Devices are New connections are established via the "connection"
endpoint with POST.  Connections may be removed using DELETE.
Information about a connection may be retrieved using GET.  /

## /data

Reads and writes are supported.  The form of the read or the write
is polymorphic, depending on the technology in use.

## registration

Registration elements do not invoke direct communication to a device,
but instead create MQTT topics based on the parameters given in a POST.
The topic can be removed using DELETE.




Publish/Subscribe Interface
===========================

Here provide a narrative description of the pub/sub interface.


Security Considerations
=======================

Too early.

IANA Considerations
===================

Too early.

--- back


OpenAPI definitions
===================

The following non-normative model is provide for convenience of
the implementor.

~~~~~~
<CODE BEGINS>file "openapi.yml"
{::include nipc-openapi/NIPC_REST.yaml}
<CODE ENDS>
~~~~~~

Protobufs definitions
=====================

Here provide protobufs definitions for telemetry interface.
