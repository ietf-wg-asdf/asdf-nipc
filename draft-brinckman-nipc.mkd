---
title: An Application Layer Interface for Non-IP device control
abbrev: NIPC
docname: draft-brinckman-nipc-00
submissionType: IETF
category: std

ipr: trust200902
keyword: Internet-Draft

stand_alone: no
pi: [toc, sortrefs, symrefs]

author:
 -  ins: B. Brinckman
    name: Bart Brinckman
    org: Cisco Systems
    city: Brussels
    country: Belgium
    email: bbrinckma@cisco.com
 -
    ins: E. Lear
    name: Eliot Lear
    org: Cisco Systems
    street: Richtistrasse 7
    code: CH-8304
    city: Wallisellen
    country: Switzerland
    phone: +41 44 878 9200
    email: lear@cisco.com

normative:
  BLE53:
    title: Bluetooth Core Specification, Version 5.3
    author:
      -
        org: Bluetooth SIG
    date: 2021
  Zigbee22:
    title: zigbee Specification, Version 22 1.0
    author:
      -
        org: Connectivity Standards Alliance
    date: 2017


--- abstract

This memo specifies RESTful application layer interface for non-IP
operations.  The interface initially describes Bluetooth Low
Energy and Zigbee.

--- middle

Introduction
============

There has been an explosion of non-IP devices to support
manufacturing, healthcare, the home, and the office.  At the same
time, wireless access points have been deployed nearly everywhere,
many of which have soft or separate radios that can transmit and
receive different frame types, such as {{BLE53}}.  To avoid the need for
parallel infrastructure, a gateway control function is necessary.

The gateway provides the following functions:
 - authentication and authorization of application clients that
   will access devices
 - maintenance of an inventory of devices that are intended to
   access and be accessed by the deployment and applications.
 - a map of which APs should be communicating with the endpoints.
 - one or more channels to process requests, responses, and asymmetric
   communciations.

Combined with a provisioning interface such as
{{!I-D.shahzad-scim-device-model}}, this specification supports
these aspects.

~~~~~


                            +-----------------------------------+
                            |                                   |
    +-----------+   Request |  +---------+                      |
    | onboarding|------------->|  SCIM   |                      |
    |    app    |<-------------| Server  |                      |
    +-----------+  Ctrl Endpt  +---------+                      |
                            |                                   |
    +-----------+           |  +------------+  +-------+  +--+  |
    |  Control  |>...REST...|.>|            |..|  AP   |..|D |  |
    |     &     |           |  |   Gateway  |  +-------+  +--+  |
    | Telemetry |<...MQTT...|.<|            |                   |
    |    Apps   |           |  +------------+                   |
    +-----------+           |                                   |
                            |       Enterprise Deployment       |
                            +-----------------------------------+

~~~~~
{: #arch title="Basic Architecture"}

{{arch}} shows us the application layer gateway (ALG), an access
point (AP), and a device (D) in the enterprise environment.  The role
of the ALG is to select the appropriate AP.  MQTT is used to send
unsolicited messages generated from devices.  These messages can be
subscribed to using the control interface.

The flow of operations is as follows:

1. Get SCIM endpoint authorized.  This occurs out of band but may
   be accomplished manually, via a federated transaction, or through
   other means.
2. Provision applications that may control devices.
3. Provision applications that may receive telemetry.
4. Provision one or more devices.

Steps 1-4 are not within the scope of this specification, but are
provided for context.

5. Transmit appropriate GATT requests and await replies via this
   specification.

This specification is organized into three sections:

- Basic control functions described in narrative.
- A specification that can be mapped to a publication/subscribe
  interface, such as MQTT.
- OpenAPI and Protobufs definitions for the above

## Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14 {{!RFC2119}} {{!RFC8174}} when, and only when, they appear in all
capitals, as shown here.

# Basic Operations and concepts

The general flow of operations is as follows:

1. Introduce device using /introduce
2. Connect to device if bidirectional communications are desired,
   POSTing the /connection object. 
3. Send GATT reads and writes, establish indications and notifications
   using the /data operations.
4. Receive those indications and notifications via MQTT
5. Disconnect DELETEing the /connection object.

## Connecting to The Control Interface

The control interface makes use of RESTful HTTP{{!RFC9114}}.  The
connection endpoint is provided out of band, most likely through
the SCIM devices model extension, in which an application is registered.
Similarly authentication is specified using that SCIM interface.  It
may be based on a device certificate or via a token.

# Control Interface Scheme Elements

What follows is a narrative description of each RESTful endpoint
and the parameters that follow at a coarse level.  Additional information
may be necessary based on what non-IP technology is in use.  There are
several groupings available through this model:

 - /connectivity establishes and ends bidirectional communciations
 - /data processes basic protocol operations (reads, writes,
   subscriptions, and device schema discovery)
 - /registrations registers interest in an MQTT topic for telemetry
 - /bulk handles bulk operations

## Common definitions

Many of RESTful operations refer to or return an "Object".  This is defined in the schema as having the following properties:


| Attribute     | Req |   Type   |          Example                    |
+---------------+----------+-------------------------------------------|
| id            |  T  |  uuid   | 12345678-1234-5678-1234-56789abcdef4 |
| controlApp    |  T  |  url    | https://control-app-1.example.com    |
| objectType    |  T  |  enum   | device                               |
| technology    |  F  |  enum   | ble                                  |
{: #objectdef title="Definition of an Object"}

where-

 - id is the id returned in a SCIM request.
 - objectType is either "group" or "device".
 - technology is either "ble" or "zigbee".
 - controlApp is the URI to refer to this device. XXX

Other elements are explained in line.

~~~

## Connectivity Elements

Connectivity elements are accessed from this group of operations.

### /introduce

This endpoint notifies the network that the device should be
accessible.  The only operation supported is POST.  A single Object
is transmitted in the content.  This operation MUST be performed before
the applications may connect to a device.

### /connection

Devices are New connections are established via the "connection"
endpoint with POST.  Connections may be removed using DELETE.
Information about a connection may be retrieved using GET.  /

#### POST




## /data



## registration

Registration elements do not invoke direct communication to a device,
but instead create MQTT topics based on the parameters given in a POST.
The topic can be removed using DELETE.




Publish/Subscribe Interface
===========================

Here provide a narrative description of the pub/sub interface.


Security Considerations
=======================

Too early.

IANA Considerations
===================

Too early.

--- back


OpenAPI definitions
===================

The following non-normative model is provide for convenience of
the implementor.

~~~~~~
<CODE BEGINS>file "openapi.yml"
{::include nipc-openapi/NIPC_REST.yaml}
<CODE ENDS>
~~~~~~

Protobufs definitions
=====================

Here provide protobufs definitions for telemetry interface.
